        -:    0:Source:main.cpp
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:
function _Z3fooii called 5 returned 100% blocks executed 100%
        5:    3:int foo(int a, int b) {
        5:    4:    if (a > 0 && b > 0) {
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        1:    5:        return a + b;
        -:    6:    }
        4:    7:    if (a < 0 && b < 0) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        1:    8:        return -a -b;
        -:    9:    }
        3:   10:    return 0;
        -:   11:}
        -:   12:
function _Z3bari called 4 returned 100% blocks executed 100%
        4:   13:int bar(int a) {
        4:   14:    int ret = 0;
        4:   15:    switch(a) {
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 25%
branch  3 taken 25%
        1:   16:        case 0:
        1:   17:            ret = 0;
        1:   18:            break;
        1:   19:        case 1:
        1:   20:            ret = 1;
        1:   21:            break;
        1:   22:        case 2:
        1:   23:            ret = 2;
        1:   24:            break;
        1:   25:        default:
        1:   26:            ret = -1;
        1:   27:            break;
        -:   28:    }
        4:   29:    return ret;
        -:   30:}
        -:   31:
function main called 1 returned 100% blocks executed 98%
        1:   32:int main(int argc, char* argv[]) {
        -:   33:    // This is a dead branch, which will not be covered.
        1:   34:    if (argc > 100) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   35:        return -1;
        -:   36:    }
        1:   37:    int a = 1;
        1:   38:    int b = 2;
        1:   39:    std::cout << "foo(1, 2) = " << foo(a, b) << std::endl;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        1:   40:    std::cout << "bar(1) = " << bar(a) << std::endl;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   41:
        -:   42:    // New test cases for full coverage
        1:   43:    std::cout << "--- New Test Cases ---" << std::endl;
call    0 returned 100%
call    1 returned 100%
        -:   44:
        -:   45:    // Test cases for foo()
        1:   46:    std::cout << "foo(-1, -2) = " << foo(-1, -2) << std::endl; // Covers a < 0 && b < 0
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        1:   47:    std::cout << "foo(0, 0) = " << foo(0, 0) << std::endl;     // Covers the default return
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        1:   48:    std::cout << "foo(1, -1) = " << foo(1, -1) << std::endl;   // Covers a > 0 and b <= 0
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        1:   49:    std::cout << "foo(-1, 1) = " << foo(-1, 1) << std::endl;   // Covers a < 0 and b >= 0
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   50:
        -:   51:    // Test cases for bar()
        1:   52:    std::cout << "bar(0) = " << bar(0) << std::endl;       // Covers case 0
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        1:   53:    std::cout << "bar(2) = " << bar(2) << std::endl;       // Covers case 2
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        1:   54:    std::cout << "bar(3) = " << bar(3) << std::endl;       // Covers default case
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   55:
        1:   56:    return 0;
        -:   57:}
